#!/usr/bin/env node

/**
 * Script definitivo para verificar TypeScript compilaci√≥n
 * Ejecuta --noEmit para verificar tipos sin generar archivos
 */

import { spawn } from 'child_process';
import { existsSync } from 'fs';
import path from 'path';

console.log('üîç Verificaci√≥n TypeScript Final del Backend\n');

// Verificar que estamos en el directorio correcto
if (!existsSync('./tsconfig.json')) {
  console.error('‚ùå No se encontr√≥ tsconfig.json');
  console.error('üí° Ejecuta este script desde el directorio /backend/');
  process.exit(1);
}

console.log('üìÅ Directorio backend verificado ‚úÖ');
console.log('‚ö° Ejecutando: npx tsc --noEmit\n');

const tscProcess = spawn('npx', ['tsc', '--noEmit'], { 
  stdio: ['pipe', 'pipe', 'pipe'],
  shell: true,
  cwd: process.cwd()
});

let output = '';
let errorOutput = '';

tscProcess.stdout.on('data', (data) => {
  const text = data.toString();
  output += text;
  process.stdout.write(text);
});

tscProcess.stderr.on('data', (data) => {
  const text = data.toString();
  errorOutput += text;
  process.stderr.write(text);
});

tscProcess.on('close', (code) => {
  console.log('\n' + '='.repeat(60));
  
  if (code === 0) {
    console.log('üéâ ¬°√âXITO TOTAL! CERO ERRORES DE TYPESCRIPT');
    console.log('='.repeat(60));
    console.log('\n‚úÖ BACKEND REAL TYPESCRIPT COMPLETAMENTE FUNCIONAL\n');
    
    console.log('üöÄ COMANDOS PARA EJECUTAR:');
    console.log('   npm run dev:ts        - Servidor con ts-node (RECOMENDADO)');
    console.log('   npm run dev           - Servidor con nodemon');
    console.log('   npm run compile       - Compilar y ejecutar\n');
    
    console.log('üìä FUNCIONALIDADES DISPONIBLES:');
    console.log('   üîê Autenticaci√≥n JWT completa');
    console.log('   üóÑÔ∏è Base de datos MySQL (o modo memoria)');
    console.log('   üõ°Ô∏è Seguridad de producci√≥n');
    console.log('   üìù Logging con Winston');
    console.log('   ‚ö° Validaciones Joi');
    console.log('   üö® Manejo de errores profesional');
    console.log('   üìã APIs: gastos, quinielas, saldos\n');
    
    console.log('üéØ CREDENCIALES DE PRUEBA:');
    console.log('   üìß Email: admin@demo.com');
    console.log('   üîë Password: demo123\n');
    
    console.log('üí° PR√ìXIMO PASO: npm run dev:ts');
    
  } else {
    console.log('‚ùå ERRORES DE TYPESCRIPT DETECTADOS');
    console.log('='.repeat(60));
    console.log('\nüîß Revisar los errores de arriba para corregir.\n');
    
    if (errorOutput.includes('jest')) {
      console.log('üí° SUGERENCIA: Error relacionado con Jest');
      console.log('   Soluci√≥n: Remover "jest" del campo "types" en tsconfig.json');
    }
    
    if (errorOutput.includes('allowImportingTsExtensions')) {
      console.log('üí° SUGERENCIA: Opci√≥n no v√°lida en TypeScript');
      console.log('   Soluci√≥n: Remover "allowImportingTsExtensions" del tsconfig.json');
    }
    
    console.log('\nüìù Para obtener ayuda espec√≠fica:');
    console.log('   1. Revisa los errores detallados arriba');
    console.log('   2. Consulta ERRORES_SOLUCIONADOS.md');
    console.log('   3. Ejecuta: npm install para dependencias faltantes');
  }
  
  console.log('\n' + '='.repeat(60));
});

tscProcess.on('error', (error) => {
  console.error('\n‚ùå Error ejecutando TypeScript compiler:');
  console.error(error.message);
  console.error('\nüí° SOLUCIONES:');
  console.error('   npm install -g typescript');
  console.error('   npm install typescript');
  console.error('   npx tsc --version');
});